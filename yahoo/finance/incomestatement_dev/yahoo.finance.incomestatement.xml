<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>
            Ryan Hoium
        </author>
        <description>
            Yahoo Finance - Income Statement
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='T'
        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
            	<key id="symbol" type="xs:string" paramType="variable" required="true" />
            	<key id="reporttype" type="xs:string" paramType="variable" default={table} required="optional" />
            	<key id="timeframe" type="xs:string" paramType="variable" default="quarterly" required="optional" />
            </inputs>
            <execute>
            <![CDATA[
		    //UTILITY: pad string with leading char		
			String.prototype.pad = function ( padchar, padlen )
			{
				s = this
				
				while (s.length < padlen)
				{
					s = padchar + s;
				}
						
				return s;
			}
			
            //UTILITY: convert string to INTEGER		 
			String.prototype.toInt = function ()
			{
				// remove leading 0's because otherwise 
				// str can be interpreted as Octal
				var str = this.replace( /^0+/, '' );

				// also the thousands comma was cousing trouble
				str = str.trim()
                str = str.replace( /\,/g, '' );

                // replace M with 6 ZEROs, B with 9 ZEROs (UPDATE THIS - ACCOUNT FOR DECIMAL!!
                //str = str.replace(/M/g,'000000');
                //str = str.replace(/B/g,'000000000');

				return parseInt( str );
			}	
		    //UTILITY: trim whitespace		 
			String.prototype.trim = function ()
			{
				var str = this.replace( /^\s\s*/, "" ),
				ws = /\s/,
				i = str.length;
				while ( ws.test( str.charAt( --i ) ) );
				return str.slice( 0, i + 1 );
			}
            
            // Setup Query from finance.yahoo.com
            var reporttype_code = "";
            if(reporttype == "incomestatement"){reporttype_code = "is";}
            else if(reporttype == "balancesheet"){reporttype_code = "bs";}
            else if(reporttype == "cashflow"){reporttype_code = "cf";}
            var url="http://finance.yahoo.com/q/"+ reporttype_code + "?s=" + symbol + "&" + timeframe;
			var restquery = y.rest( url );	
			var rawresult = restquery.accept( "text/html" ).get().response;
			var query = y.xpath(
                                    rawresult,
                                    "//table[@class="yfnc_tabledata1"]/tr/td/table/tr"
                                );	


            // Process Results
            var outputdata = <{reporttype} symbol={symbol} timeframe={timeframe}></stats>;
			if ( query.*.length() != 0 )
			{

            var y = 0; var x = 0;
            var numcolumns = 0;
            var data_array = '';
            
            // Read Column Headings
            for each ( var column in query[0]){
                data_array[x][0] = column.*.text().toString();
                x++;
            }
            numcolumns = x;

            // Read Rows
            y = 1;            
            while ( y < query.length()) 
			{
                
                var row = query[y];
                x = 0;
                for each (var column in row){
                    data_array[x][y] = column.*.text().toString();
                }

                // Setup to Process Two 'td' Elements at a Time - Name and Value Pairs
                

                var td_param_name = query[i];
                var td_value = query[i+1];
                var param_name = "";
                var attr = "";
                var value = "";
                i = i + 2;
                
                // Process Parameter Name and any Associated Attributes (Timeframe, Stock Split Info)
                param_name = td_param_name.p.text().toString();
                param_name = String(param_name.replace(/:/g,""));
                attr = String(param_name.match(/\(.*\)/));
                attr = String(attr.trim());
                attr = attr.replace(/[\(\)]/g,"");
                param_name = String(param_name.replace(/\(.*\)/g,""));
                param_name = String(param_name.replace(/\s/g,""));
                param_name = String(param_name.replace(/\&/g,""));
                param_name = String(param_name.replace(/\//g,""));
                param_name = String(param_name.replace(/\%/g,"Percentage"));
                param_name = String(param_name.replace(/-/g,"_"));
                if(param_name.match(/^\d/)){ param_name = String("p_" + param_name);}
                param_name = param_name.trim();

                // Process Value Information
                value = td_value.p.text().toString();
                // Catch When it is Span Tag instead of P tag
                if( value == false){
                    value = td_value.span.text().toString();
                }
                //Replace B, M, K with Proper Trailing Zeroes/Decimal Handling
                if(value.match(/[Bb]$/)){ value = value.replace(/[Bb]$/,""); value = value * 1000000000;}
                else if(value.match(/[Mm]$/)){ value = value.replace(/[Mm]$/,""); value = value * 1000000;}
                else if(value.match(/[Kk]$/)){ value = value.replace(/[Kk]$/,""); value = value * 1000;}

                // Append Value Pair to XML Structure
                if(attr !== "null"){ outputdata.appendChild(<{param_name} term={attr}> {value} </{param_name}>);}
                else {  outputdata.appendChild(<{param_name}> {value} </{param_name}>);}

			}		
		    }
            // Return statsdata strucuture
            response.object = outputdata;


	

					 
					 
		]]>
            </execute>
        </select>
    </bindings>
</table>
