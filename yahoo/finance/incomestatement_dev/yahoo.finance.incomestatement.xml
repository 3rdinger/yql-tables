<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>
            Ryan Hoium
        </author>
        <description>
            Yahoo Finance - Income Statement
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='T'
        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
            	<key id="symbol" type="xs:string" paramType="variable" required="true" />
            	<key id="reporttype" type="xs:string" paramType="variable" default="incomestatement" required="false" />
            	<key id="timeframe" type="xs:string" paramType="variable" default="quarterly" required="false" />
            </inputs>
            <execute>
            <![CDATA[
		    //UTILITY: pad string with leading char		
			String.prototype.pad = function ( padchar, padlen )
			{
				s = this
				
				while (s.length < padlen)
				{
					s = padchar + s;
				}
						
				return s;
			}
			
            //UTILITY: convert string to INTEGER		 
			String.prototype.toInt = function ()
			{
				// remove leading 0's because otherwise 
				// str can be interpreted as Octal
				var str = this.replace( /^0+/, '' );

				// also the thousands comma was cousing trouble
				str = str.trim()
                str = str.replace( /\,/g, '' );

                // replace M with 6 ZEROs, B with 9 ZEROs (UPDATE THIS - ACCOUNT FOR DECIMAL!!
                //str = str.replace(/M/g,'000000');
                //str = str.replace(/B/g,'000000000');

				return parseInt( str );
			}	
		    //UTILITY: trim whitespace		 
			String.prototype.trim = function ()
			{
				var str = this.replace( /^\s\s*/, "" ),
				ws = /\s/,
				i = str.length;
				while ( ws.test( str.charAt( --i ) ) );
				return str.slice( 0, i + 1 );
			}
            
            // Setup Query from finance.yahoo.com
            var reporttype_code = "";
            if(reporttype == "incomestatement"){reporttype_code = "is";}
            else if(reporttype == "balancesheet"){reporttype_code = "bs";}
            else if(reporttype == "cashflow"){reporttype_code = "cf";}
            var url="http://finance.yahoo.com/q/"+ reporttype_code + "?s=" + symbol + "&" + timeframe;
			var restquery = y.rest( url );	
			var rawresult = restquery.accept( "text/html" ).get().response;
			var query = y.xpath( rawresult, "//table[@class='yfnc_tabledata1']/tr/td/table/tr");	

            // Process Results
            var outputdata = <{reporttype} symbol={symbol} timeframe={timeframe}></{reporttype}>;
			if ( query.*.length() !== 0 )
			{
                var y = 0; var x = 1;
                var numcolumns = 0;
                var data_array = new Array();
            
                // Read Column Headings
                data_array[0] = new Array();
                for each ( var th in query[0].th)
                {
                    //data_array[x][0] = column.text().toString();
                    data_array[x] = new Array();
                    data_array[x][y] = th.*.text().toString();
                    outputdata.appendChild(<column x={x} y={y}>{data_array[x][y]}</column>);
                    x++;
                }
                numcolumns = x;

                // Read Rows
                y = 1;            
                while ( y < query.length()) 
			    {
                
                    var row = query[y];
                    x = 0;
                    // read each column in row
                    for each (var column in row.td){
                        //data_array[x][y] = column.*.text().toString();
                        //TODO: cycle through rows, load into 2D matrix
                        //TODO: transpose into financial statement's by time period
                        outputdata.appendChild(<row>{column.*.text()}</row>); 
                    }
                    y++;
                }
            }
            // Return statsdata strucuture
            response.object = outputdata;


	

					 
					 
		]]>
            </execute>
        </select>
    </bindings>
</table>
