<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>
            Ryan Hoium
        </author>
        <description>
            Yahoo Finance - Key Statistics by Stock Symbol
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='GOOG'
            use "http://raw.github.com/canada4663/yql-tables/master/yahoo/finance/keystats/yahoo.finance.keystats.xml" as keystats; select * from keystats where symbol="goog";


        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
            	<key id="symbol" type="xs:string" paramType="variable" required="true" />
            </inputs>
            <execute>
                <![CDATA[
			
			// Setup Query to
            var url="http://finance.yahoo.com/q/ks?s=" + symbol;
			var restquery = y.rest( url );	
			var rawresult = restquery.accept( "text/html" ).get().response;
			var keystatsquery = y.xpath(
                                    rawresult,
                                    "//table[@class='yfnc_datamodoutline1']/tr/td/table/tr" +
                                    "/td[@class='yfnc_tabledata1' or @class='yfnc_tablehead1']"
                                );	
            var statsdata = <stats symbol={symbol}></stats>;
			if ( keystatsquery.*.length() != 0 )
			{
            var i = 0;
            for each ( var td in keystatsquery )
			{
                var content = "test";
                i++;
                //if(td.p !== undefined){content = td.p.text();}
                if (td.span.text() !== undefined) {content = td.span.text();}
                else {content = "N/A";}
                statsdata.appendChild(<row>{content}</row>);
                
			}		
		    }
            response.object = statsdata;


	
			//UTILITY: pad string with leading char		
			String.prototype.pad = function ( padchar, padlen )
			{
				s = this
				
				while (s.length < padlen)
				{
					s = padchar + s;
				}
						
				return s;
			}
			
            //UTILITY: trim whitespace		 
			String.prototype.trim = function ()
			{
				var str = this.replace( /^\s\s*/, "" ),
				ws = /\s/,
				i = str.length;
				while ( ws.test( str.charAt( --i ) ) );
				return str.slice( 0, i + 1 );
			}
			
            //UTILITY: convert string to INTEGER		 
			String.prototype.toInt = function ()
			{
				// remove leading 0's because otherwise 
				// str can be interpreted as Octal
				var str = this.replace( /^0+/, '' );

				// also the thousands comma was cousing trouble
				str = str.trim()
                str = str.replace( /\,/g, '' );

                // replace M with 6 ZEROs, B with 9 ZEROs (UPDATE THIS - ACCOUNT FOR DECIMAL!!
                //str = str.replace(/M/g,'000000');
                //str = str.replace(/B/g,'000000000');

				return parseInt( str );
			}
					 
			function getOptionsChain()
			{
				// Get the Options Chain for the given symbol from the Options page
				
				var results = optionsChainQuery;
						
				elements = results.*.length();
				
				if ( elements == 0 )
				{
					return false;
				}
				
				var optionElem;
				
				var strikePrice;
				var optionSymbol;
				var optionType;
				var lastPrice;
				var change;
				var changeDir;
				var bid;
				var ask;
				var vol;
				var volStr;
				var openInt;
				var openIntStr;
					
				var optTypeMatch;

				for each ( var tr in results )
				{
					strikePrice = parseFloat( tr.td[0].a.strong.text() );
					optionSymbol = tr.td[1].a.text();
					
					// Check to see what type of option
					// the current option is

					optTypeMatch = optionSymbol.match( /^[\w]{7,}([P|C])/ );

					if ( optTypeMatch != null )
					{
						optionType = optTypeMatch[1];
					}

					lastPrice = tr.td[2].strong.text();
					change = tr.td[3].span.strong.text();
					changeDir = tr.td[3].span.img.@alt.toString();
					bid = parseFloat( tr.td[4].p.text() );
					ask = parseFloat( tr.td[5].p.text() );
					volStr = tr.td[6].p.text();
					vol = volStr.toInt();
					openIntStr = tr.td[7].p.text(); 
					openInt = openIntStr.toInt();
							
					if ( changeDir.toLowerCase() == "down" )
					{
						change = parseFloat( change ) * -1;
					}
					else
					{
						change = parseFloat( change );
					}
							
					optionElem = <option symbol={optionSymbol} type={optionType}></option>;
					optionElem.appendChild(<strikePrice>{strikePrice}</strikePrice>);
					optionElem.appendChild(<lastPrice>{lastPrice}</lastPrice>);
					optionElem.appendChild(<change>{change}</change>);
					optionElem.appendChild(<changeDir>{changeDir}</changeDir>);
					optionElem.appendChild(<bid>{bid}</bid>);
					optionElem.appendChild(<ask>{ask}</ask>);
					optionElem.appendChild(<vol>{vol}</vol>);
					optionElem.appendChild(<openInt>{openInt}</openInt>);
					
					optionsChain.appendChild( optionElem );
				}
						
				return true;
			}

			function getExpiration()
			{
				var results = expiresQuery;

				y.log( "results.length(): " + results.length() );
			
				elements = results.*.length();
						
				if ( elements == 0 )
				{
					y.log( "no elements" );
					return "";
				}

				var dateRegEx = /.*([\d]{2})\,\s+?[\d]{4}/g;

				var dateRes = dateRegEx.exec( results[0] );
				
				var dd;

				if ( dateRes != null &&
					dateRes[ 1 ] != null )
				{
					dd = dateRes[ 1 ];
				}

				return dd;
			}

function EXCLUDE(){					 
			// Queue the query
			 
			var optionsChainURL = "http://finance.yahoo.com/q/op?s=" + symbol;
			var queryHasExpiration = false;

			if ( expiration != null )
			{
				var expPattern = /^[\d]{4}\-[\d]{2}$/;
				
				if ( expPattern.test( expiration ) )
				{
					optionsChainURL += "&m=" + expiration;
					queryHasExpiration = true;
				}
			}

			var yQuery = y.rest( optionsChainURL );	
			var data = yQuery.accept( "text/html" ).get().response;
			
			var optionsChainQuery = y.xpath(
							data, 
							"//table[@class='yfnc_datamodoutline1']/tr/td/table/tr[td[@class='yfnc_h' or " + 
							"@class='yfnc_tabledata1']]"
			);
			
			var expiresQuery = y.xpath( 
				data,
				"//table[@class='yfnc_mod_table_title1']/tr/td[last()]/p"
			);

			var expiryDay = getExpiration();
					
			var optionsChain;
 			var expDate = expiration;

			if ( queryHasExpiration == true )
			{
				if ( expiryDay != null && 
					expiryDay != "" )
				{
					expDate += "-" + expiryDay;
				}

				optionsChain = <optionsChain symbol={symbol} expiration={expDate}></optionsChain>;
			}
			else
			{
				optionsChain = <optionsChain symbol={symbol}></optionsChain>;
			}

			getOptionsChain();
					
			response.object = optionsChain;
}
					 
		]]>
            </execute>
        </select>
    </bindings>
</table>
