<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>
            Ryan Hoium
        </author>
        <description>
            Yahoo Finance - Key Statistics by Stock Symbol
        </description>
        <sampleQuery>
            SELECT * FROM {table} WHERE symbol='GOOG'
            use "http://raw.github.com/canada4663/yql-tables/master/yahoo/finance/keystats/yahoo.finance.keystats.xml" as keystats; select * from keystats where symbol="goog";


        </sampleQuery>
    </meta>
    <bindings>
        <select itemPath="" produces="XML">
            <urls>
                <url>
                </url>
            </urls>
            <inputs>
            	<key id="symbol" type="xs:string" paramType="variable" required="true" />
            </inputs>
            <execute>
                <![CDATA[
			
		    //UTILITY: trim whitespace		 
			String.prototype.trim = function ()
			{
				var str = this.replace( /^\s\s*/, "" ),
				ws = /\s/,
				i = str.length;
				while ( ws.test( str.charAt( --i ) ) );
				return str.slice( 0, i + 1 );
			}
            
            //UTILITY: clean xml invalid characters
            String.prototype.CleanInvalidXmlChars = function ()
            {
                var re = "/[^\x09\x0A\x0D\x20-\xD7FF\xE000-\xFFFD\x10000-x10FFFF]/";
                return this.replace(this, re, "");
            }
            
            // Setup Query to
            var url="http://finance.yahoo.com/q/ks?s=" + symbol;
			var restquery = y.rest( url );	
			var rawresult = restquery.accept( "text/html" ).get().response;
			var keystatsquery = y.xpath(
                                    rawresult,
                                    "//table[@class='yfnc_datamodoutline1']/tr/td/table/tr" +
                                    "/td[@class='yfnc_tabledata1' or @class='yfnc_tablehead1']"
                                );	
            var statsdata = <stats symbol={symbol}></stats>;
			if ( keystatsquery.*.length() != 0 )
			{
            var i = 0;
            while ( i < keystatsquery.length()) 
			{
                // Setup to Process Two 'td' Elements at a Time - Name and Value Pairs
                var td_param_name = keystatsquery[i];
                var td_value = keystatsquery[i+1];
                i = i + 2;
                var param_name = "N/A";
                var attr = "N/A"
                var value = "N/A"
                
                // Process Parameter Name and any Associated Attributes (Timeframe, Stock Split Info)
                if (td_param_name !== undefined){
                if (td_param_name.p !== undefined){
                    param_name = td_param_name.p.text().toString();
                    param_name = String(param_name.replace(/:/g,""));
                    param_name = String(param_name.trim());
                    attr = String(param_name.match(/\(.*\)/));
                    attr = String(attr.trim());
                    attr = attr.replace(/[\(\)]/g,"");
                    param_name = String(param_name.replace(/\(.*\)/g,""));
                    param_name = param_name.trim();
                }
                }

                // Process Value Information
                if (td_value !== undefined){
                    if (td_value.p !== undefined){
                        value = td_value.p.text().toString();
                        
                        // Catch When it is Span Tag instead of P tag
                        if( value == null){
                            value = td_value.span.text().toString();
                        }
                    }
                }
                //if (td.span.text() !== undefined) {param_name = td.span.text();}

                statsdata.appendChild(<param name={param_name} term={attr}> {value} </param>);

			}		
		    }
            response.object = statsdata;


	
			//UTILITY: pad string with leading char		
			String.prototype.pad = function ( padchar, padlen )
			{
				s = this
				
				while (s.length < padlen)
				{
					s = padchar + s;
				}
						
				return s;
			}
			
          
			
            //UTILITY: convert string to INTEGER		 
			String.prototype.toInt = function ()
			{
				// remove leading 0's because otherwise 
				// str can be interpreted as Octal
				var str = this.replace( /^0+/, '' );

				// also the thousands comma was cousing trouble
				str = str.trim()
                str = str.replace( /\,/g, '' );

                // replace M with 6 ZEROs, B with 9 ZEROs (UPDATE THIS - ACCOUNT FOR DECIMAL!!
                //str = str.replace(/M/g,'000000');
                //str = str.replace(/B/g,'000000000');

				return parseInt( str );
			}
					 
					 
		]]>
            </execute>
        </select>
    </bindings>
</table>
