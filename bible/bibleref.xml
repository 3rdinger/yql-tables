<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
  <meta>
    <author>Vic Mortelmans</author>
    <description>The table breaks down complex bible references to a list of references to single verses. Also includes the OSISid format of the verse references.</description>
    <sampleQuery>select * from bible.bibleref where bibleref="Rev 22:7,10,18-19"</sampleQuery>
    <documentationURL></documentationURL>
  </meta>
  <bindings>
    <select produces="XML" itemPath="">
      <urls>
        <url></url>
      </urls>
      <inputs>
        <key id="bibleref" type="xs:string" paramType="variable" required="true"/>
      </inputs>
      <execute><![CDATA[ 
        var book = "";
        var osisbook = "";
        var bookrecord;
        var bookoutlinerecord;
        var chapter = 0;
        var list = new XMLList();
        bibleref = bibleref.replace(/ *([\.,;:\- ]) */g,"$1");
        y.log(bibleref);
        parse_reference(bibleref);
        response.object = list;
        
        function split_on_first(string,regex)
        {
          string = string.replace(regex,"%");
          y.log("split " + string + " on " + "'%'");
          split = string.split(/%/,2);
          if (split.length < 2)
          {
            split[1] = "";
          }
          y.log("returns '" + split[0] + "' and '" + split[1] + "'");
          return {before:split[0],after:split[1]};
        }
        function bookquery()
        {
          var booksquery = 'select book from xml where url="http://github.com/vicmortelmans/BibleConfiguration/raw/master/books.xml" and book.input matches "(?i)$book"';
          booksquery = booksquery.replace("$book",book);
          var books = y.query(booksquery).results.books;
          if (books.book.length() < 1) {
              var error_message = '$book is not a bible book. Common bible book abbreviations : $supported';
              error_message = error_message.replace("$book",book);
              error_message = error_message.replace("$supported","http://biblewiki.net/books/index");
              y.log(error_message);
              y.exit();
          }
          bookrecord = books.book[0];
        }
        function getosisbook()
        {
          osisbook = bookrecord.code.(@service == 'osis').toString();
        }
        function bookoutlinequery()
        {
          var booksquery = 'select book from xml where url="http://github.com/vicmortelmans/BibleConfiguration/raw/master/bible-outline.xml" and book.name = "$osisbook"';
          booksquery = booksquery.replace("$osisbook",osisbook);
          var books = y.query(booksquery).results.books;
          if (books.book.length() < 1) {
              y.log('Internal error (01)');
              y.exit(); 
          }
          var bookoutlinerecord = books.book[0];          
        }
        function get_number_of_verses(chapter)
        {
          return bookoutlinerecord.chapter.(@number=chapter).@number-of-verses;
        }
        function list(book,chapter,verse,osisbook)
        {
          list += <bibleref>
          <book>{book}</book>
          <chapter>{chapter}</chapter>
          <verse>{verse}</verse>
          <osisref>{osisbook + '.' + chapter + '.' + verse}</osisref>
          </bibleref>;
        }
        function parse_reference(bibleref)
        {
          y.log("parse_reference " + bibleref);
          var split = split_on_first(bibleref,/[ ]/);
          if (parseInt(split.before))
          {
            book = split.before + " ";
          }
          else
          {
            split.after = bibleref; 
          }
          var split2 = split_on_first(split.after,/[:\. ]/);
          book = book + split2.before;
          bookquery();
          getosisbook();
          bookoutlinequery();
          parse_list(split2.after);
        }
        function parse_list(list)
        {
          y.log("parse_list " + list);
          var split = split_on_first(list,/[,;]/);
          parse_range(split.before);
          if (split.after)
          {
            parse_range(split.after);
          }
        }
        function parse_range(range)
        {
          y.log("parse_range " + range);
          var split = split_on_first(range,/[-]/);
          var begin = parse_explicit_location(split.before);
          var end = begin;
          if (split.after)
          {
            end = parse_implicit_location(split.after);
          }
          if (begin.chapter > end.chapter)
          {
            y.log("Invalid bible chapter range");
            y.exit();
          }
          for (chapter = begin.chapter; chapter <= end.chapter; chapter++)
          {
            var number_of_verses = get_number_of_verses(chapter);
            var chapterbeginverse = chapter==begin.chapter?begin.verse:1;
            var chapterendverse = chapter==end.chapter?end.verse:number_of_verses;
            for (verse = chapterbeginverse; verse <= chapterendverse; verse++)
            {
              list (book, chapter, verse, osisbook);
            }
          }
        }
        function parse_explicit_location(location)
        {
          y.log("parse_explicit " + location);
          var split = split_on_first(location,/[:\. ]/);
          y.log(split.toString());
          var splitlocation = {chapter: split.before, verse: split.after};
          y.log(splitlocation.toString());
          var number_of_verses = get_number_of_verses(splitlocation.chapter);
          if (!number_of_verses)
          {
            y.log("Invalid chapter number");
            y.exit();
          }          
          if (!splitlocation.verse || splitlocation.verse > number_of_verses)
          {
            y.log("invalid verse number");
            y.exit();
          }
          y.log("parse_explicit returns");
          return splitlocation;
        }
        function parse_implicit_location(location)
        {
          y.log("parse_implicit " + location);
          var split = split_on_first(location,/[:\. ]/);
          var splitlocation = {chapter:split.before,verse:split.after};
          var verse; // chapter is a global variable!
          if (split.after)
          {
            chapter = before
            verse = after
          }
          else
          {
            verse = location
          }
          if (!number_of_verses)
          {
            y.log("Invalid chapter number");
            y.exit();
          }          
          if (!splitlocation.verse || splitlocation.verse > get_number_of_verses(splitlocation.chapter))
          {
            y.log("invalid verse number");
            y.exit()
          }
          return splitlocation;
        }
      ]]></execute>
      </select>
  </bindings>
</table>
