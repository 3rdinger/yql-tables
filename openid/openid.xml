<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>Erik Eldridge</author>
        <description>
            - generate an openid auth url from an identifier.  
            - supports openid 2.0 only, ie is not 1.1 compat
            - For more info see http://openid.net/specs/openid-authentication-2_0.html
        </description>
        <sampleQuery>select * from {table} where identifier="yahoo.com" and return_to="http://example.com"</sampleQuery>
    </meta>
    <bindings>
        <select produces="XML">
            <inputs>
                <key id="id" type="xs:string" paramType="variable" required="true"/>
                <key id="return_to" type="xs:string" paramType="variable" required="true"/>
                <key id="assoc_handle" type="xs:string" paramType="variable" />
            </inputs>
            <execute><![CDATA[
                
                //set this domain to your base uri for testing 
                var domain = 'http://github.com/erikeldridge/yql-tables/raw/master/openid',
                
                    normalize = function (id) {
                        var tableUri = domain+'/openid.normalize.xml',                    
                            query = 'use "'+tableUri+'" as norm; '
                                + 'select * from norm where id="'+id+'"',
                            results = y.xmlToJson(y.query(query).results);
                        
                        if ('success' == results.results.result.state) {
                            return results.results.result.id;
                        } else {
                            return false;
                        }
                    },
                    discover = function (normId) {
                    
                        //try yadis
                        var yadisTableUri = domain+'/openid.yadis.xml?r=5',
                            yadisQuery = 'use "'+yadisTableUri+'" as yadis; '
                                + 'select * from yadis where uri = "'+normId+'"',
                            yadisResults = y.xmlToJson(y.query(yadisQuery).results);y.log(yadisResults);
                        
                        //results.result only shows up for success responses. not sure why
                        if (yadisResults.results.result 
                            && 'success' === yadisResults.results.result.status) {
                            var xrdsQuery = 'select * from xml where url="'+yadisResults.results.result.uri+'"',
                                xrdsResult = y.xmlToJson(y.query(xrdsQuery).results);
                            return xrdsResult.results.XRDS.XRD.Service.URI;
                        }
                        
                        //try html                    
                        var htmlQuery = 'select * from html where url="'+normId+'" '
                                + 'and xpath=\'//link[@rel="openid2.provider"]\'',
                            htmlResults = y.xmlToJson(y.query(htmlQuery).results);
                        if (htmlResults.results) {
                            return htmlResults.results.link.href;
                        }
                        
                        //ok, yadis and html fail, so give up
                        return false;                    
                    },
                    associate = function (baseUri) {
                        var tableUri = domain+'/openid.assoc.xml?w=56',
                            query = 'use "'+tableUri+'" as table; '
                                + 'select * from table where uri="'+baseUri+'"',
                            results = y.xmlToJson(y.query(query).results);
                        if (results.results.result 
                            &&'success' == results.results.result.status) {
                            return results.results.result.assoc;
                        } else {
                            return false;
                        }
                    },
                    
                    //use a wrapper fn so we can exit early, ie as a workaround for lack of exit(), die(), etc
                    wrapper = function (id) {
                    
                        //normalize id
                        var normId = normalize(id);
                    
                        if (!normId) {
                            return {
                                'status' : 'error',
                                'details' : 'invalid id'
                            };
                        }
                    
                        //get auth base url
                        var baseUri = discover(normId);
                    
                        if (!baseUri) {
                            return {
                                'status' : 'error',
                                'details' : 'id could not be resolved to an openid provider'
                            };
                        }
                    
                        //get association
                        var assoc = associate(baseUri);
                        
                        if (!assoc) {
                            return {
                                'status' : 'error',
                                'details' : 'no association could be made'
                            };
                        }
                        
                        var assoc_handle = assoc[1];
                        
                        //validate return_to and extract realm url
                        var pattern = '^([^:?#/]+'  //scheme
                                + ':\/\/'           //separator
                                +'[^:?#/]+)',       //domain

                            match = return_to.match(new RegExp(pattern));

                        if (match) {
                            var realm = match[0];
                        } else {
                            return {
                                'status' : 'error',
                                'details' : 'invalid return_to uri'
                            };
                        }                      
                        
                        //construct auth uri
                        var params = {
                                'openid.ns' : 'http://specs.openid.net/auth/2.0',
                                'openid.realm' : realm,
                                'openid.mode' : 'checkid_setup',
                                'openid.return_to' : return_to,
                                'openid.identity' : 'http://specs.openid.net/auth/2.0/identifier_select',
                                'openid.claimed_id' : 'http://specs.openid.net/auth/2.0/identifier_select'
                            },

                            pairs = [];
                        
                        
                        if (assoc_handle) {
                            params['openid.assoc_handle'] = assoc_handle;
                        }
                        
                        for (var key in params) {
                            pairs.push(key + '=' + encodeURIComponent(params[key]));
                        }
                    
                        return {
                            "status" : "success",
                            "uri" : baseUri + '?' + pairs.join('&')
                        };
                    
                    }(id);
                    
                //output
                if ('success' === wrapper.status) {
                    response.object = {
                        "status" : "success",
                        "uri" : wrapper.uri
                    };
                } else {
                    response.object = {
                        "status" : "error",
                        "details" : wrapper.details
                    };
                }
                
            ]]></execute>
        </select>
    </bindings>
</table>
